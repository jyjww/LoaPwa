import { Injectable, Logger } from '@nestjs/common';
import { Cron } from '@nestjs/schedule';
import { FavoritesService } from './favorite.service';
import { MarketService } from '@/markets/market.service';
import { AuctionService } from '@/auctions/auction.service';

@Injectable()
export class FavoritesScheduler {
  private readonly logger = new Logger(FavoritesScheduler.name);

  constructor(
    private readonly favoritesService: FavoritesService,
    private readonly marketService: MarketService,
    private readonly auctionService: AuctionService,
  ) {}

  /**
   * 5Î∂ÑÎßàÎã§ Ï¶êÍ≤®Ï∞æÍ∏∞ Í∞±Ïã† Î∞∞Ïπò Ïã§Ìñâ
   */
  @Cron('0 0 * * *')
  async handleCron() {
    this.logger.log('üîî FavoritesScheduler Ïã§Ìñâ');

    // 1Ô∏è‚É£ ÌôúÏÑ± Ï¶êÍ≤®Ï∞æÍ∏∞ Ï°∞Ìöå
    const favorites = await this.favoritesService.findActive();

    // 2Ô∏è‚É£ unique itemId Ï∂îÏ∂ú
    const uniqueIds = [...new Set(favorites.map((f) => f.itemId).filter(Boolean))];
    this.logger.log(`üéØ Ï≤òÎ¶¨Ìï† unique itemIds: ${uniqueIds.length}`);

    // 3Ô∏è‚É£ LostArk API Ìò∏Ï∂ú (ÏãúÏû•/Í≤ΩÎß§ Î∂ÑÎ¶¨)
    for (const itemId of uniqueIds) {
      try {
        // source Íµ¨Î∂Ñ
        const sample = favorites.find((f) => f.itemId === itemId);
        if (!sample) continue;

        if (sample.source === 'market') {
          const res = await this.marketService.search({ query: sample.name });
          const item = res.items.find((i) => i.id === sample.itemId);
          if (item) {
            // 4Ô∏è‚É£ DB ÏóÖÎç∞Ïù¥Ìä∏ + ÏïåÎ¶º Ï°∞Í±¥ Ï≤¥ÌÅ¨
            await this.favoritesService.updateSnapshotAndCheck(sample.id, {
              currentPrice: item.currentMinPrice,
              previousPrice: item.yDayAvgPrice ?? sample.previousPrice,
              marketInfo: item,
              lastCheckedAt: new Date(),
            });
          }
        }

        if (sample.source === 'auction') {
          const res = await this.auctionService.search({ query: sample.name });
          const item = res.items.find((i) => i.id === sample.itemId);
          if (item) {
            await this.favoritesService.updateSnapshotAndCheck(sample.id, {
              currentPrice: item.currentPrice,
              previousPrice: item.previousPrice ?? sample.previousPrice,
              auctionInfo: item,
              lastCheckedAt: new Date(),
            });
          }
        }
      } catch (err) {
        this.logger.error(`‚ùå itemId=${itemId} ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®`, err);
      }
    }
  }
}
